Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:

The solution set must not contain duplicate triplets.

Example:

Given array nums = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

Python3 program:

class Solution:
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        # a + b + c
        # Sorting[-4,-1,-1,0,1,2]
        # [0,0,0,0,0,0]
         # ^     ^   ^
        output = []
        nums.sort()
        
        for a in range(len(nums)-1):
            if nums[a] > 0: break
            if a > 0 and nums[a] == nums[a-1]: continue
            l,r = a+1, len(nums)-1
            while (l<r):
                if nums[a]+nums[l]+nums[r] < 0:
                    l+=1
                elif nums[a]+nums[l]+nums[r] > 0:
                    r-=1
                else:
                    output.append([nums[a],nums[l],nums[r]])
                    while l<r and nums[l] == nums[l+1]:
                        l+=1
                    while l<r and nums[r] == nums[r-1]:
                        r-=1
                    l+=1
                    r-=1
        return output
        
C++ code:

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n= nums.size();
        if(n<3) return {};
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());
        for (int i = 0;i < n-2; ++i){
            if(i == 0|| nums[i] != nums[i-1]){
                int j = i+1, k = n-1;
                while(j<k){
                    int sum = nums[i]+nums[j]+nums[k];
                    if(sum==0){
                        result.push_back({nums[i],nums[j],nums[k]});
                        while(j<k && nums[j] == nums[j+1]) j++;
                        while(j<k && nums[k] == nums[k-1]) k--;
                        j++; k--;
                    }
                    else if (sum > 0) k--;
                    else j++;
                }
            }
        }
        return result;
    }
};
