Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

C++ code:

class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        if(!root) return {};
        vector<vector<int>> result;
        deque<TreeNode*> Q;
        Q.push_back(root);
        bool reverse = true;
        
        while(!Q.empty()) {
            int count = Q.size();
            vector<int> level_nodes;
            deque<TreeNode*> dQ;
            
            for(int i = 0; i < count; ++i) {
                TreeNode* n = Q.front();
                level_nodes.push_back(n->val);
                Q.pop_front();
                if(reverse) {
                    if(n->left) dQ.push_front(n->left);
                    if(n->right) dQ.push_front(n->right);
                    
                }else{
                    if(n->right) dQ.push_front(n->right);
                    if(n->left) dQ.push_front(n->left);
                    
                }
            }
            Q.insert(Q.end(), dQ.begin(), dQ.end());
            result.push_back(level_nodes);
            reverse = !reverse;
        }
        return result;
    }
};

Python3 program:

class Solution:
    def zigzagLevelOrder(self, root: TreeNode) -> List[List[int]]:
        output = []
        def dfs(node, level, output):
            if not node:
                return
            if len(output) <= level:
                output += [[]]
            dfs(node.left, level+1, output)
            dfs(node.right, level+1, output)
            if level % 2 == 0:
                output[level].append(node.val)
            else:
                output[level].insert(0,node.val)
                
        dfs(root,0,output)
        return output
